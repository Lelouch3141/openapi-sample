openapi: 3.0.0
info:
  title: サンプル用API
  version: 1.0.0
servers:
  - url: http://localhost:8080
security:
  - bearerAuth: []
# controllerの粒度
tags: 
  - name: users
    description: ユーザー情報API
  - name: items
    description: 商品情報API

# endpointごとの定義
paths:
  /users: # endpointのpath
    get: # method-type
      operationId: getUsers # controllerの関数名
      summary: ユーザー一覧取得 # 概要(javadocに記載される
      description: ユーザーの一覧を取得します。指定されたパラメータでフィルターします。 #詳細説明(javadocに記載される)
      tags: # 設定するtag
        - user
      responses: # 返却するresponse定義
        '200': # 200の場合(各ステータスコードについて併記できる)
          description: OK # responseの概要
          content: # responseの中身
            application/json: # content-type
              schema:
                type: array # 型定義
                items: # itemsというschemaを切る
                  $ref: '#/components/schemas/User' # 参照(定義はcomponents/schemas/Userを参照の意)
    post:
      operationId: createUser
      summary: ユーザー登録
      description: ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
      tags: 
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Create
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      operationId: getUserById
      summary: ユーザー詳細取得
      description: ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
      tags: 
        - user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: updateUserById
      summary: ユーザー更新
      description: ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
      tags: 
        - user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: deleteUserById
      summary: ユーザー削除
      description: ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
      tags: 
        - user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /items:
    $ref: paths/items.yml
  # 参照用のAPI定義
  /_references/dummy:
    get:
      operationId: dummy
      summary: dummy
      description: 型定義の参照用のpath定義。
      tags:
        - ignore
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  # 以降この箇所のpropertiesで無理やり参照する
                  greeting:
                    $ref: '#/components/schemas/Greeting'
                  

# モデル定義など(リクエスト、レスポンス、enumなどの)
components:
  # 認証についての説明(mock-serverにも気持ちの認証機構が再現される)
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        認証用のJWTトークンを利用したBearer認証です。

  # モデル定義
  schemas:      
    User: # Userモデルを定義
      type: object # 型：オブジェクト
      required: # 必須の項目を設定(複数指定可能)
        - name
        - email
      properties: # objectの中身の定義
        id: # idプロパティを定義
          description: ユーザーID # プロパティの説明
          type: integer # 型定義
          format: uuid # format定義
          minimum: 1 # 最小桁数(簡単なvalidation定義になる)
          example : 1 # 最小桁数(簡単なvalidation定義になる)
        name:
          description: 氏名
          type: string
          minLength: 3
          maxLength: 50
          example: John Lennon
        email:
          description: メールアドレス
          type: string
          format: email
          example: aaa@sample.com
        gender:
          description: 性別
          $ref: schemas/enum/Gender.yml
        age:
          description: 年齢
          type: integer
          example: 20
        # 型定義
          # integer: 整数
            # int32
            # int64
          # number: 浮動小数
            # float
            # double
          # string: 文字列
            # byte
            # binary
            # date
            # date-time
            # email
            # hostname
            # uri
          # boolean: 真偽
          # array: 配列
          # object: オブジェクト
    Greeting:
        description: あいさつ
        type: integer
        enum:
          - 0
          - 1
          - 2
        x-enum-varnames:
          - good_morning
          - hello
          - good_knight
        x-enum-descriptions:
          - おはよう
          - こんにちは
          - おやすみ