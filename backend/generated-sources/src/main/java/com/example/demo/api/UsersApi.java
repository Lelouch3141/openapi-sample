/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api;

import com.example.demo.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "users", description = "ユーザー情報API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users : ユーザー登録
     * ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
     *
     * @param user  (required)
     * @return Create (status code 201)
     */
    @Operation(
        operationId = "createUser",
        summary = "ユーザー登録",
        description = "ユーザーの一覧を取得します。指定されたパラメータでフィルターします。",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Create", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> createUser(
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"license\" : \"運転免許\", \"gender\" : 0, \"name\" : \"John Lennon\", \"id\" : 1, \"email\" : \"aaa@sample.com\", \"age\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{id} : ユーザー削除
     * ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
     *
     * @param id  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteUserById",
        summary = "ユーザー削除",
        description = "ユーザーの一覧を取得します。指定されたパラメータでフィルターします。",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> deleteUserById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"license\" : \"運転免許\", \"gender\" : 0, \"name\" : \"John Lennon\", \"id\" : 1, \"email\" : \"aaa@sample.com\", \"age\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{id} : ユーザー詳細取得
     * ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUserById",
        summary = "ユーザー詳細取得",
        description = "ユーザーの一覧を取得します。指定されたパラメータでフィルターします。",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getUserById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"license\" : \"運転免許\", \"gender\" : 0, \"name\" : \"John Lennon\", \"id\" : 1, \"email\" : \"aaa@sample.com\", \"age\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : ユーザー一覧取得
     * ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUsers",
        summary = "ユーザー一覧取得",
        description = "ユーザーの一覧を取得します。指定されたパラメータでフィルターします。",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> getUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"license\" : \"運転免許\", \"gender\" : 0, \"name\" : \"John Lennon\", \"id\" : 1, \"email\" : \"aaa@sample.com\", \"age\" : 20 }, { \"license\" : \"運転免許\", \"gender\" : 0, \"name\" : \"John Lennon\", \"id\" : 1, \"email\" : \"aaa@sample.com\", \"age\" : 20 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{id} : ユーザー更新
     * ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
     *
     * @param id  (required)
     * @param user  (required)
     * @return Updated (status code 200)
     */
    @Operation(
        operationId = "updateUserById",
        summary = "ユーザー更新",
        description = "ユーザーの一覧を取得します。指定されたパラメータでフィルターします。",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> updateUserById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"license\" : \"運転免許\", \"gender\" : 0, \"name\" : \"John Lennon\", \"id\" : 1, \"email\" : \"aaa@sample.com\", \"age\" : 20 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
