/*
 * サンプル用API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using sample.Client;
using sample.Model;

namespace sample.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ユーザー登録
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>User</returns>
        User CreateUser(User user);

        /// <summary>
        /// ユーザー登録
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserWithHttpInfo(User user);
        /// <summary>
        /// ユーザー削除
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        User DeleteUserById(int id);

        /// <summary>
        /// ユーザー削除
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> DeleteUserByIdWithHttpInfo(int id);
        /// <summary>
        /// ユーザー詳細取得
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        User GetUserById(int id);

        /// <summary>
        /// ユーザー詳細取得
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserByIdWithHttpInfo(int id);
        /// <summary>
        /// ユーザー一覧取得
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetUsers();

        /// <summary>
        /// ユーザー一覧取得
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetUsersWithHttpInfo();
        /// <summary>
        /// ユーザー更新
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>User</returns>
        User UpdateUserById(int id, User user);

        /// <summary>
        /// ユーザー更新
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserByIdWithHttpInfo(int id, User user);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ユーザー登録
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserAsync(User user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザー登録
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserWithHttpInfoAsync(User user, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ユーザー削除
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> DeleteUserByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザー削除
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> DeleteUserByIdWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ユーザー詳細取得
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザー詳細取得
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserByIdWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ユーザー一覧取得
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetUsersAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザー一覧取得
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ユーザー更新
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserByIdAsync(int id, User user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザー更新
        /// </summary>
        /// <remarks>
        /// ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </remarks>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserByIdWithHttpInfoAsync(int id, User user, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IDisposable, IUserApi
    {
        private sample.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = sample.Client.Configuration.MergeConfigurations(
                sample.Client.GlobalConfiguration.Instance,
                new sample.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new sample.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = sample.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public UserApi(sample.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = sample.Client.Configuration.MergeConfigurations(
                sample.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new sample.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = sample.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = sample.Client.Configuration.MergeConfigurations(
                sample.Client.GlobalConfiguration.Instance,
                new sample.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new sample.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = sample.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, sample.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = sample.Client.Configuration.MergeConfigurations(
                sample.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new sample.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = sample.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public UserApi(sample.Client.ISynchronousClient client, sample.Client.IAsynchronousClient asyncClient, sample.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = sample.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public sample.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public sample.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public sample.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sample.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sample.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ユーザー登録 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>User</returns>
        public User CreateUser(User user)
        {
            sample.Client.ApiResponse<User> localVarResponse = CreateUserWithHttpInfo(user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー登録 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of User</returns>
        public sample.Client.ApiResponse<User> CreateUserWithHttpInfo(User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new sample.Client.ApiException(400, "Missing required parameter 'user' when calling UserApi->CreateUser");

            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = user;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー登録 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserAsync(User user, System.Threading.CancellationToken cancellationToken = default)
        {
            sample.Client.ApiResponse<User> localVarResponse = await CreateUserWithHttpInfoAsync(user, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー登録 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<sample.Client.ApiResponse<User>> CreateUserWithHttpInfoAsync(User user, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new sample.Client.ApiException(400, "Missing required parameter 'user' when calling UserApi->CreateUser");


            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = user;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー削除 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        public User DeleteUserById(int id)
        {
            sample.Client.ApiResponse<User> localVarResponse = DeleteUserByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー削除 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        public sample.Client.ApiResponse<User> DeleteUserByIdWithHttpInfo(int id)
        {
            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", sample.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<User>("/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー削除 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> DeleteUserByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            sample.Client.ApiResponse<User> localVarResponse = await DeleteUserByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー削除 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<sample.Client.ApiResponse<User>> DeleteUserByIdWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {

            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", sample.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<User>("/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー詳細取得 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        public User GetUserById(int id)
        {
            sample.Client.ApiResponse<User> localVarResponse = GetUserByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー詳細取得 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        public sample.Client.ApiResponse<User> GetUserByIdWithHttpInfo(int id)
        {
            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", sample.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー詳細取得 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            sample.Client.ApiResponse<User> localVarResponse = await GetUserByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー詳細取得 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<sample.Client.ApiResponse<User>> GetUserByIdWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {

            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", sample.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー一覧取得 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetUsers()
        {
            sample.Client.ApiResponse<List<User>> localVarResponse = GetUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー一覧取得 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public sample.Client.ApiResponse<List<User>> GetUsersWithHttpInfo()
        {
            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー一覧取得 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetUsersAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            sample.Client.ApiResponse<List<User>> localVarResponse = await GetUsersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー一覧取得 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<sample.Client.ApiResponse<List<User>>> GetUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {

            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー更新 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>User</returns>
        public User UpdateUserById(int id, User user)
        {
            sample.Client.ApiResponse<User> localVarResponse = UpdateUserByIdWithHttpInfo(id, user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー更新 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of User</returns>
        public sample.Client.ApiResponse<User> UpdateUserByIdWithHttpInfo(int id, User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new sample.Client.ApiException(400, "Missing required parameter 'user' when calling UserApi->UpdateUserById");

            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", sample.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = user;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<User>("/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー更新 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserByIdAsync(int id, User user, System.Threading.CancellationToken cancellationToken = default)
        {
            sample.Client.ApiResponse<User> localVarResponse = await UpdateUserByIdWithHttpInfoAsync(id, user, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー更新 ユーザーの一覧を取得します。指定されたパラメータでフィルターします。
        /// </summary>
        /// <exception cref="sample.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<sample.Client.ApiResponse<User>> UpdateUserByIdWithHttpInfoAsync(int id, User user, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new sample.Client.ApiException(400, "Missing required parameter 'user' when calling UserApi->UpdateUserById");


            sample.Client.RequestOptions localVarRequestOptions = new sample.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = sample.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = sample.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", sample.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = user;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
